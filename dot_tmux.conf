if-shell "uname | grep -q Darwin" {
    # Seems like some magic to get copy paste working in tmux for mac.
    set-option -g default-command "reattach-to-user-namespace -l /opt/homebrew/bin/zsh" 
}

# Set status bar
set -g status-bg black
set -g status-fg white

# Date on the right in format Month Day Year.
#set-option -g status-right "\"#W\" %Y-%m-%d uptime:#{uptime}"

# Allow 10000 lines of history
set-option -g history-limit 1000000

# active border color green --> blue
set-option -g pane-active-border-style fg=blue
#set -g pane-active-border-style "bg=default fg=blue"
set -g pane-active-border-style fg=colour8
set -g pane-active-border-style bg=default

## Copy paste setup
set-window-option -g mode-keys vi
# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi 'v' send -X begin-selection

if-shell "uname | grep -q Darwin" {
    # Note: 
    # - "copy-pipe" copies but does not exit tmux selection mode.
    # - "copy-pipe-and-cancel" exits tmux selection mode.
    # - reattach-to-user-namespace is unnecessary from tmux version 2.6.
    #   hence it does not have to be "reattach-to-user-namespace pbcopy",
    #   just "pbcopy" works.
    bind-key -T copy-mode-vi 'y' send -X copy-pipe "pbcopy"
    bind-key -T copy-mode-vi Enter send -X copy-pipe 'pbcopy'
    # Use mouse drag to copy the selected text to clipboard.
    bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
} {
    bind-key -T copy-mode-vi 'y' send -X copy-pipe 'xclip -in -selection clipboard'
    bind-key -T copy-mode-vi Enter send -X copy-pipe 'xclip -in -selection clipboard'
    bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe 'xclip -in -selection clipboard'
}

# mouse to work
set-option -g -q mouse on
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# Renumber the windows automatically.
set-option -g renumber-windows on

# Change prefix to ctrl g
set -g prefix C-g


# Look and feel setup.
#source-file ~/.tmux/theme.conf

# Use zsh as default shell. 
#set-option -g default-shell /opt/homebrew/bin/zsh 

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# Plugin for showing uptime in the status bar.

# Setup theme.
set -g @plugin 'catppuccin/tmux'
# Note that this has to be loaded after catppuccin/tmux to show it in the theme.
set -g @plugin 'robhurring/tmux-uptime'
set -g @catppuccin_flavour 'mocha' # or frappe, macchiato, mocha

set -g @catppuccin_window_left_separator ""
set -g @catppuccin_window_right_separator " "
set -g @catppuccin_window_middle_separator " █"
set -g @catppuccin_window_number_position "right"

set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_default_text "#{b:pane_current_path}"

set -g @catppuccin_window_current_fill "number"
set -g @catppuccin_window_current_text "#{b:pane_current_path}"

# Somehow specifying uptime here just works without having to define custom/uptime.sh.
set -g @catppuccin_status_modules_right "application date_time session uptime"
set -g @catppuccin_status_left_separator  ""
set -g @catppuccin_status_right_separator " "
#set -g @catppuccin_status_right_separator_inverse "yes"
#set -g @catppuccin_status_fill "all"
#set -g @catppuccin_status_connect_separator "no"
#set -g @catppuccin_status_left_separator "█"
#set -g @catppuccin_status_right_separator "█"

set -g @catppuccin_directory_text "#{pane_current_path}"
# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
